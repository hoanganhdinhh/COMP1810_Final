getwd()
CO2
summary(CO2)
data(CO2)
x <- CO2$Plant
mean(x)
median(x)
range(x)
mean(x)
x <- CO2$conc
mean(x)
median(x)
range(x)
data(CO2)
summary(CO2)
mean(x)
median(x)
range(x)
median(x)
range(x)
a <- CO2$uptake
b <- CO2$conc
boxplot(a,b)
boxplot(a,b, data = CO2, colour = factor(cyl))
qplot(a,b, data = CO2, colour = factor(cyl))
qplot(a,b, data = CO2, colour = Type)
summary(CO2)
qplot(a,b, data = CO2, colour = CO2$Type)
a <- CO2$uptake
b <- CO2$conc
qplot(a,b, data = CO2, colour = CO2$Type)
install.packages("ggplot2")
library(ggplot2)
#testing the compiler
# Use plots...
plot(cars)
# Even ggplot!
qplot(wt, mpg, data = mtcars, colour = factor(cyl))
ggplot(mpg, aes(displ, hwy, colour = class)) +
geom_point()
a <- CO2$uptake
b <- CO2$conc
qplot(a,b, data = CO2, colour = CO2$Type)
plot(CO2)
a <- CO2$uptake
b <- CO2$conc
qplot(a,b, data = CO2, colour = CO2$Type)
CO2
summary(CO2)
data(CO2)
x <- CO2$conc
mean(x)
median(x)
range(x)
mode <- function(x){
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode(x)
data()
airquality
trees
mode <- function(x){
y <- unique(x)
y[which.max(tabulate(match(x, y)))]
}
mode(x)
mean(conc)
conc <- CO2$conc
mean(conc)
median(conc)
range(conc)
mode <- function(x){
y <- unique(x)
y[which.max(tabulate(match(x, y)))]
}
mode(x)
mode(conc)
trees
summary(trees)
summary(trees)
data(trees)
mean(abc)
abc <- trees$Height
mean(abc)
median(abc)
range(abc)
mode(abc)
a <- trees$Height
boxplot(a, main="Boxplot Trees Height", ylab= Height, col = blue)
boxplot(a, main="Boxplot Trees Height", ylab= "Height", col = blue)
boxplot(a, main="Boxplot Trees Height", ylab= "Height", col = "blue")
penguins
rivers
rock
trees
summary(trees)
data(trees)
abc <- trees$Height
mean(abc)
median(abc)
range(abc)
mode <- function(x){
y <- unique(x)
y[which.max(tabulate(match(x, y)))]
}
mode(abc)
a <- trees$Height
boxplot(a, main="Boxplot Trees Height", ylab= "Height", col = "blue")
boxplot(trees$Height, main="Boxplot Trees Height", ylab= "Height", col = "blue")
trees
penguins
rock
penguins
summary(penguins)
data(penguins)
abc <- penguins$year
mean(abc)
median(abc)
range(abc)
mode <- function(x){
y <- unique(x)
y[which.max(tabulate(match(x, y)))]
}
mode(abc)
boxplot(a, main="Boxplot Trees Height", ylab= "Height", col = "blue")
a <- penguins$year
a <- trees$Height
boxplot(a, main="Height Distribution of Trees", ylab="Tree Height (feet)", col = 'Green')
# Reset graphic parameters to default
par(mfrow = c(1,1)) # If you were using multi-panel plots, reset to 1 plot per window
dev.off()           # Sometimes clearing the plotting device helps
a <- trees$Height
boxplot(a, main="Height Distribution of Trees", ylab="Tree Height (feet)", col = 'Green')
install.packages("ggplot2")
library(ggplot2)
plot(penguins)
penguins
a <- penguins$bill_len
b <- penguins$bill_dep
qplot(a,b, data = penguins, colour = factor(cyl))
qplot(a,b, data = penguins, colour = species)
penguins
bill_len <- penguins$bill_len
bill_dep <- penguins$bill_dep
qplot(bill_len, bill_dep, data = penguins, colour = species)
qplot(bill_len, bill_dep, data = penguins, colour = year)
qplot(bill_len, bill_dep, data = penguins, colour = sex)
qplot(bill_len, bill_dep, data = penguins, colour = species)
trees
summary(trees)
data(trees)
abc <- trees$Height
mean(abc)
median(abc)
range(abc)
mode <- function(x){
y <- unique(x)
y[which.max(tabulate(match(x, y)))]
}
mode(abc)
a <- trees$Height
boxplot(a, main="Height Distribution of Trees", ylab="Tree Height (feet)", col = 'Green')
install.packages("ggplot2")
library(ggplot2)
plot(CO2)
plot(trees)
b <- trees$Height
c <- trees$Volume
qplot(b,c, data = trees, colour = trees$Height)
qplot(b,c, data = trees, colour = trees$Girth)
qplot(b,c, data = trees)
penguins
summary(penguins)
data(penguins)
abc <- penguins$year
View(penguins)
penguins
summary(penguins)
data(penguins)
abc <- penguins$year
mean(abc)
median(abc)
range(abc)
mode <- function(x){
y <- unique(x)
y[which.max(tabulate(match(x, y)))]
}
mode(abc)
a <- penguins$year
boxplot(a, main="Boxplot Trees Height", ylab= "Height", col = "blue")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
plot(penguins)
penguins
bill_len <- penguins$bill_len
bill_dep <- penguins$bill_dep
qplot(bill_len, bill_dep, data = penguins, colour = species)
qplot(bill_len, bill_dep, data = penguins)
olour = species
olour = species
qplot(bill_len, bill_dep, data = penguins, colour = species)
qplot(bill_len, bill_dep, data = penguins, xlab = bill length, ylab = bill dep, colour = species)
qplot(bill_len, bill_dep, data = penguins, xlab = "bill length", ylab = "bill dep", colour = species)
boxplot(a, main="Boxplot Trees Height", ylab= "Year", col = "blue")
summary(penguins)
boxplot(a, main="Penguins year", ylab= "Year", col = "blue")
trees
summary(trees)
data(trees)
abc <- trees$Height
mean(abc)
median(abc)
range(abc)
mode <- function(x){
y <- unique(x)
y[which.max(tabulate(match(x, y)))]
}
mode(abc)
a <- trees$Height
boxplot(a, main="Height Distribution of Trees", ylab="Tree Height (feet)", col = 'Green')
install.packages("ggplot2")
library(ggplot2)
plot(trees)
b <- trees$Height
c <- trees$Volume
qplot(b,c, data = trees)
qplot(b,c, data = trees)
cars
iris
bill_len <- penguins$bill_len
bill_dep <- penguins$bill_dep
qplot(bill_len, bill_dep, data = penguins, xlab = "bill length", ylab = "bill dep", colour = factor(height))
penguins
summary(penguins)
data(penguins)
abc <- penguins$year
mean(abc)
median(abc)
range(abc)
mode <- function(x){
y <- unique(x)
y[which.max(tabulate(match(x, y)))]
}
mode(abc)
a <- penguins$year
boxplot(a, main="Penguins year", ylab= "Year", col = "blue")
a <- penguins$year
boxplot(a, main="Penguins year", ylab= "Year", col = "blue")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
boxplot(a, main="Penguins year", ylab= "Year", col = "blue")
a <- penguins$year
boxplot(a, main="Penguins year", ylab= "Year", col = "blue")
plot(penguins)
a <- penguins$year
boxplot(a, main="Penguins year", ylab= "Year", col = "blue")
trees
summary(trees)
data(trees)
abc <- trees$Height
mean(abc)
median(abc)
range(abc)
mode <- function(x){
y <- unique(x)
y[which.max(tabulate(match(x, y)))]
}
mode(abc)
a <- trees$Height
boxplot(a, main="Height Distribution of Trees", ylab="Tree Height (feet)", col = 'Green')
trees
trees
summary(trees)
data(trees)
abc <- trees$Height
mean(abc)
median(abc)
range(abc)
mode <- function(x){
y <- unique(x)
y[which.max(tabulate(match(x, y)))]
}
mode(abc)
a <- trees$Height
boxplot(a, main="Height Distribution of Trees", ylab="Tree Height (feet)", col = 'Green')
boxplot(a, main="Height Distribution of Trees", ylab="Tree Height (feet)", col = 'Green')
a <- trees$Height
boxplot(a, main="Height Distribution of Trees", ylab="Tree Height (feet)", col = 'Green')
trees
summary(trees)
data(trees)
abc <- trees$Height
mean(abc)
mode <- function(x){
y <- unique(x)
y[which.max(tabulate(match(x, y)))]
}
mode(abc)
median(abc)
range(abc)
boxplot(a, main="Penguins year", ylab= "Year", col = "blue")
boxplot(a, main="Penguins Age", ylab= "Age (Year)", col = "blue")
qplot(bill_len, bill_dep, data = penguins, xlab = "bill length", ylab = "bill dep"
penguins
bill_len <- penguins$bill_len
bill_dep <- penguins$bill_dep
qplot(bill_len, bill_dep, data = penguins, xlab = "bill length", ylab = "bill dep"
qplot(bill_len, bill_dep, data = penguins, xlab = "bill length", ylab = "bill dep")
qplot(b,c, xlab = "Trees Height", ylab = "Trees Volume", data = trees, colours())
library(ggplot2)
plot(trees)
b <- trees$Height
c <- trees$Volume
qplot(b,c, xlab = "Trees Height", ylab = "Trees Volume", data = trees, colours())
qplot(b,c, xlab = "Trees Height", ylab = "Trees Volume", data = trees
qplot(b,c, xlab = "Trees Height", ylab = "Trees Volume", data = trees)
b <- trees$Height
c <- trees$Volume
qplot(b,c, xlab = "Trees Height", ylab = "Trees Volume", data = trees)
library(ggplot2)
penguins
bill_len <- penguins$bill_len
bill_dep <- penguins$bill_dep
qplot(bill_len, bill_dep, data = penguins, xlab = "bill length", ylab = "bill dep")
qplot(bill_len, bill_dep, data = penguins, xlab = "bill length", ylab = "bill dep", colours(species))
qplot(bill_len, bill_dep, data = penguins, xlab = "bill length", ylab = "bill dep", colours= species)
qplot(bill_len, bill_dep, data = penguins, xlab = "bill length", ylab = "bill dep", colours(species))
qplot(bill_len, bill_dep, data = penguins, xlab = "Bill Length", ylab = "Bill Depth", colour = species)
penguins
bill_len <- penguins$bill_len
bill_dep <- penguins$bill_dep
qplot(bill_len, bill_dep, data = penguins, xlab = "Bill Length", ylab = "Bill Depth", colour = species)
boxplot(a, main="Penguins Age", ylab= "Age (Year)", col = "blue")
a <- penguins$year
boxplot(a, main="Penguins Age", ylab= "Age (Year)", col = "blue")
knitr::opts_chunk$set(echo = TRUE)
install.packages(c("tidyverse", "readr", "imputeTS", "naniar", "VIM", "recipes"))
library(tidyverse) #include dplyr, ggplot2, ...
library(readr)
library(imputeTS) #Time-series missing data imputation
library(naniar) #help us to summarise and visualize missing data
library(dplyr)
library(Hmisc)
library(skimr)
library(VIM) #Visualization and Imputation of Missing values: kNN(), aggr(), matrixplot()
library(tidyverse) #include dplyr, ggplot2, ...
library(readr)
library(imputeTS) #Time-series missing data imputation
library(naniar) #help us to summarise and visualize missing data
library(dplyr)
library(Hmisc)
library(skimr)
library(VIM) #Visualization and Imputation of Missing values: kNN(), aggr(), matrixplot()
library(recipes)
df <- read.csv("missingLemonade2016.csv",
encoding = "latin1",
fileEncoding = "latin1")
head(df)
raw <- read_csv("missingLemonade2016.csv", show_col_types = FALSE)
head(raw)
cat("The number of data points = ", nrow(raw), "\n")
cat("The number of variables = ", ncol(raw))
describe(raw)
glimpse(raw) #help us to see the null data (highligted by red)
skim(raw)
sapply(raw, class)
for (value in raw$Price){
print(value)
print(class(value))
print("--------")
}
for (value in raw$Price){
print(value)
print(class(value))
print("--------")
}
colSums(is.na(raw)) #return the real null values (NA - empty values)
naniar::miss_var_summary(raw)
naniar::vis_miss(raw) + theme_light()
raw %>% count(Location) %>%
ggplot(aes(x=Location, y=n)) + geom_bar(stat = "identity", width=0.2, fill="blue")
raw %>% filter(Location == "na")
raw %>% count(Orange) %>%
ggplot(aes(x=Orange, y=n)) + geom_bar(stat = "identity", width=0.1, fill="pink")
raw %>% filter(Orange == "na")
raw %>% count(Price) %>%
ggplot(aes(x=Price, y=n)) + geom_bar(stat = "identity", width=0.3, fill="red")
raw %>% filter(Price == "--")
raw %>% count(Date) %>%
ggplot(aes(x=Date, y=n)) + geom_bar(stat = "identity", width=0.1, fill="green")
raw %>% filter(Date == "na")
naniar::miss_var_summary(raw)
library(tidyverse)
library(readr)
library(imputeTS)
library(naniar)
library(dplyr)
library(Hmisc)
library(skimr)
library(VIM)
library(recipes)
library(knitr)
library(ggplot2)
library(scales)
library(stringr)
df <- read.csv("../data/Web Analytic_Dataset.csv")
df
df <- read.csv("../data/Web Analytic_Dataset.csv")
df
raw <- read_csv("../data/Web Analytic_Dataset.csv")
head(raw)
cat("The number of data points = ", nrow(raw), "\n")
cat("The number of variables = ", ncol(raw))
sapply(raw, class)
describe(raw)
colSums(is.na(raw))
naniar::miss_var_summary(raw)
skim(raw)
raw <- raw %>%
mutate(`Bounce Rate` = as.numeric(str_replace_all(`Bounce Rate`, "%", "")) / 100)
str(raw)
top_3_sources <- raw %>%
group_by(Source_Medium, Year) %>%
summarise(Total_Revenue = sum(Revenue, na.rm = TRUE)) %>%
slice_max(order_by = Total_Revenue, n = 3) %>%
pull(Source_Medium)
library(tidyverse)
library(readr)
library(imputeTS)
library(naniar)
library(dplyr)
library(Hmisc)
library(skimr)
library(VIM)
library(recipes)
library(knitr)
library(ggplot2)
library(scales)
library(stringr)
df <- read.csv("../data/Web Analytic_Dataset.csv")
df
raw <- read_csv("../data/Web Analytic_Dataset.csv")
head(raw)
cat("The number of data points = ", nrow(raw), "\n")
cat("The number of variables = ", ncol(raw))
sapply(raw, class)
describe(raw)
colSums(is.na(raw))
naniar::miss_var_summary(raw)
skim(raw)
top_3_sources <- raw %>%
group_by(Source_Medium, Year) %>%
summarise(Total_Revenue = sum(Revenue, na.rm = TRUE)) %>%
slice_max(order_by = Total_Revenue, n = 3) %>%
pull(Source_Medium)
revenue <- raw %>%
group_by(Source_Medium, Year) %>%
summarise(Top_Revenue, sum(Revenue,na.rm = TRUE))
top_3_sources <- raw %>%
group_by(Source_Medium, Year) %>%
summarise(Total_Revenue = sum(Revenue, na.rm = TRUE)) %>%
slice_max(order_by = Total_Revenue, n = 3) %>%
pull(Source_Medium)
setwd("C:/Users/Anh/Desktop/COMP1810-COS1203/Data for CW-20250626/DataAnalyticsCW/Data")
top_3_sources <- raw %>%
group_by(Source_Medium, Year) %>%
summarise(Total_Revenue = sum(Revenue, na.rm = TRUE)) %>%
slice_max(order_by = Total_Revenue, n = 3) %>%
pull(Source_Medium)
